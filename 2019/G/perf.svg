<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="518.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="501" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="501" > </text>
<g id="frames">
<g >
<title>__const_udelay (1 samples, 0.06%)</title><rect x="1188.7" y="85" width="0.6" height="15.0" fill="rgb(241,12,35)" rx="2" ry="2" />
<text  x="1191.70" y="95.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;TrieNode*&gt; &gt;::destroy&lt;TrieNode*&gt; (2 samples, 0.11%)</title><rect x="671.2" y="373" width="1.3" height="15.0" fill="rgb(205,126,44)" rx="2" ry="2" />
<text  x="674.19" y="383.5" ></text>
</g>
<g >
<title>vfs_read (7 samples, 0.39%)</title><rect x="794.7" y="373" width="4.6" height="15.0" fill="rgb(210,1,26)" rx="2" ry="2" />
<text  x="797.72" y="383.5" ></text>
</g>
<g >
<title>__do_page_fault (84 samples, 4.63%)</title><rect x="534.0" y="293" width="54.6" height="15.0" fill="rgb(212,33,21)" rx="2" ry="2" />
<text  x="537.01" y="303.5" >__do_..</text>
</g>
<g >
<title>std::_Construct&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;&gt; (4 samples, 0.22%)</title><rect x="752.5" y="309" width="2.6" height="15.0" fill="rgb(224,164,18)" rx="2" ry="2" />
<text  x="755.46" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;char const, int&gt; &gt;::_M_valptr (3 samples, 0.17%)</title><rect x="610.7" y="357" width="2.0" height="15.0" fill="rgb(226,53,50)" rx="2" ry="2" />
<text  x="613.73" y="367.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;TrieNode**&gt;::base (1 samples, 0.06%)</title><rect x="725.8" y="261" width="0.7" height="15.0" fill="rgb(207,37,12)" rx="2" ry="2" />
<text  x="728.80" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;TrieNode**, std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt; &gt;::base (2 samples, 0.11%)</title><rect x="693.3" y="357" width="1.3" height="15.0" fill="rgb(219,153,36)" rx="2" ry="2" />
<text  x="696.29" y="367.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (7 samples, 0.39%)</title><rect x="794.7" y="293" width="4.6" height="15.0" fill="rgb(245,74,50)" rx="2" ry="2" />
<text  x="797.72" y="303.5" ></text>
</g>
<g >
<title>[unknown] (1,148 samples, 63.25%)</title><rect x="10.0" y="437" width="746.4" height="15.0" fill="rgb(213,128,18)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >[unknown]</text>
</g>
<g >
<title>std::_Vector_base&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::_M_deallocate (1 samples, 0.06%)</title><rect x="697.2" y="357" width="0.6" height="15.0" fill="rgb(233,67,54)" rx="2" ry="2" />
<text  x="700.20" y="367.5" ></text>
</g>
<g >
<title>alloc_pages_current (2 samples, 0.11%)</title><rect x="799.3" y="325" width="1.3" height="15.0" fill="rgb(211,155,27)" rx="2" ry="2" />
<text  x="802.27" y="335.5" ></text>
</g>
<g >
<title>do_anonymous_page (599 samples, 33.00%)</title><rect x="800.6" y="341" width="389.4" height="15.0" fill="rgb(254,222,42)" rx="2" ry="2" />
<text  x="803.57" y="351.5" >do_anonymous_page</text>
</g>
<g >
<title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;std::move_iterator&lt;TrieNode**&gt;, TrieNode**&gt; (23 samples, 1.27%)</title><rect x="711.5" y="309" width="15.0" height="15.0" fill="rgb(231,83,37)" rx="2" ry="2" />
<text  x="714.50" y="319.5" ></text>
</g>
<g >
<title>__handle_mm_fault (3 samples, 0.17%)</title><rect x="685.5" y="277" width="1.9" height="15.0" fill="rgb(205,183,43)" rx="2" ry="2" />
<text  x="688.49" y="287.5" ></text>
</g>
<g >
<title>__vfs_read (7 samples, 0.39%)</title><rect x="794.7" y="357" width="4.6" height="15.0" fill="rgb(218,203,2)" rx="2" ry="2" />
<text  x="797.72" y="367.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.06%)</title><rect x="1188.7" y="277" width="0.6" height="15.0" fill="rgb(222,13,10)" rx="2" ry="2" />
<text  x="1191.70" y="287.5" ></text>
</g>
<g >
<title>__do_page_fault (601 samples, 33.11%)</title><rect x="799.3" y="389" width="390.7" height="15.0" fill="rgb(205,229,46)" rx="2" ry="2" />
<text  x="802.27" y="399.5" >__do_page_fault</text>
</g>
<g >
<title>std::__copy_move_a&lt;true, TrieNode**, TrieNode**&gt; (11 samples, 0.61%)</title><rect x="714.1" y="261" width="7.2" height="15.0" fill="rgb(214,156,9)" rx="2" ry="2" />
<text  x="717.10" y="271.5" ></text>
</g>
<g >
<title>arch_get_unmapped_area_topdown (1 samples, 0.06%)</title><rect x="756.4" y="357" width="0.6" height="15.0" fill="rgb(241,98,4)" rx="2" ry="2" />
<text  x="759.36" y="367.5" ></text>
</g>
<g >
<title>page_fault (4 samples, 0.22%)</title><rect x="752.5" y="245" width="2.6" height="15.0" fill="rgb(211,110,40)" rx="2" ry="2" />
<text  x="755.46" y="255.5" ></text>
</g>
<g >
<title>x86_pmu_enable (4 samples, 0.22%)</title><rect x="787.6" y="149" width="2.6" height="15.0" fill="rgb(208,172,37)" rx="2" ry="2" />
<text  x="790.56" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;TrieNode**, std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt; &gt;::__normal_iterator (1 samples, 0.06%)</title><rect x="614.6" y="357" width="0.7" height="15.0" fill="rgb(225,47,9)" rx="2" ry="2" />
<text  x="617.63" y="367.5" ></text>
</g>
<g >
<title>do_brk_flags (1 samples, 0.06%)</title><rect x="756.4" y="373" width="0.6" height="15.0" fill="rgb(212,86,27)" rx="2" ry="2" />
<text  x="759.36" y="383.5" ></text>
</g>
<g >
<title>__const_udelay (1 samples, 0.06%)</title><rect x="1096.4" y="53" width="0.6" height="15.0" fill="rgb(209,14,27)" rx="2" ry="2" />
<text  x="1099.38" y="63.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (1 samples, 0.06%)</title><rect x="791.5" y="293" width="0.6" height="15.0" fill="rgb(205,6,32)" rx="2" ry="2" />
<text  x="794.47" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;TrieNode*&gt; &gt;::construct&lt;TrieNode*, TrieNode* const&amp;&gt; (2 samples, 0.11%)</title><rect x="726.5" y="357" width="1.3" height="15.0" fill="rgb(250,196,37)" rx="2" ry="2" />
<text  x="729.45" y="367.5" ></text>
</g>
<g >
<title>event_function (4 samples, 0.22%)</title><rect x="787.6" y="197" width="2.6" height="15.0" fill="rgb(214,153,17)" rx="2" ry="2" />
<text  x="790.56" y="207.5" ></text>
</g>
<g >
<title>get_page_from_freelist (2 samples, 0.11%)</title><rect x="790.2" y="293" width="1.3" height="15.0" fill="rgb(211,174,2)" rx="2" ry="2" />
<text  x="793.17" y="303.5" ></text>
</g>
<g >
<title>amd_pmu_disable_all (1 samples, 0.06%)</title><rect x="1188.7" y="117" width="0.6" height="15.0" fill="rgb(209,172,35)" rx="2" ry="2" />
<text  x="1191.70" y="127.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (141 samples, 7.77%)</title><rect x="1098.3" y="309" width="91.7" height="15.0" fill="rgb(208,119,41)" rx="2" ry="2" />
<text  x="1101.33" y="319.5" >__alloc_pa..</text>
</g>
<g >
<title>std::pair&lt;int, int&gt;::operator= (1 samples, 0.06%)</title><rect x="613.3" y="389" width="0.7" height="15.0" fill="rgb(228,107,26)" rx="2" ry="2" />
<text  x="616.33" y="399.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.06%)</title><rect x="756.4" y="405" width="0.6" height="15.0" fill="rgb(234,88,35)" rx="2" ry="2" />
<text  x="759.36" y="415.5" ></text>
</g>
<g >
<title>native_write_msr (7 samples, 0.39%)</title><rect x="794.7" y="117" width="4.6" height="15.0" fill="rgb(237,39,50)" rx="2" ry="2" />
<text  x="797.72" y="127.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::_Vector_base (4 samples, 0.22%)</title><rect x="752.5" y="277" width="2.6" height="15.0" fill="rgb(219,110,47)" rx="2" ry="2" />
<text  x="755.46" y="287.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.06%)</title><rect x="1096.4" y="213" width="0.6" height="15.0" fill="rgb(236,62,31)" rx="2" ry="2" />
<text  x="1099.38" y="223.5" ></text>
</g>
<g >
<title>do_page_fault (53 samples, 2.92%)</title><rect x="758.3" y="405" width="34.5" height="15.0" fill="rgb(218,84,49)" rx="2" ry="2" />
<text  x="761.31" y="415.5" >do..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.06%)</title><rect x="756.4" y="421" width="0.6" height="15.0" fill="rgb(205,211,46)" rx="2" ry="2" />
<text  x="759.36" y="431.5" ></text>
</g>
<g >
<title>__do_page_fault (53 samples, 2.92%)</title><rect x="758.3" y="389" width="34.5" height="15.0" fill="rgb(206,181,1)" rx="2" ry="2" />
<text  x="761.31" y="399.5" >__..</text>
</g>
<g >
<title>__alloc_pages_nodemask (4 samples, 0.22%)</title><rect x="752.5" y="133" width="2.6" height="15.0" fill="rgb(232,49,3)" rx="2" ry="2" />
<text  x="755.46" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::_M_erase_at_end (28 samples, 1.54%)</title><rect x="644.5" y="373" width="18.2" height="15.0" fill="rgb(207,227,50)" rx="2" ry="2" />
<text  x="647.53" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;TrieNode* const*, std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt; &gt;::__normal_iterator (1 samples, 0.06%)</title><rect x="662.7" y="357" width="0.7" height="15.0" fill="rgb(224,139,54)" rx="2" ry="2" />
<text  x="665.74" y="367.5" ></text>
</g>
<g >
<title>clear_page_rep (83 samples, 4.57%)</title><rect x="534.0" y="197" width="54.0" height="15.0" fill="rgb(246,219,50)" rx="2" ry="2" />
<text  x="537.01" y="207.5" >clear..</text>
</g>
<g >
<title>std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::max_size (6 samples, 0.33%)</title><rect x="729.7" y="341" width="3.9" height="15.0" fill="rgb(220,127,43)" rx="2" ry="2" />
<text  x="732.70" y="351.5" ></text>
</g>
<g >
<title>pipe_read (7 samples, 0.39%)</title><rect x="794.7" y="325" width="4.6" height="15.0" fill="rgb(244,75,5)" rx="2" ry="2" />
<text  x="797.72" y="335.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.06%)</title><rect x="684.8" y="341" width="0.7" height="15.0" fill="rgb(210,26,31)" rx="2" ry="2" />
<text  x="687.84" y="351.5" ></text>
</g>
<g >
<title>scheduler_tick (1 samples, 0.06%)</title><rect x="1096.4" y="133" width="0.6" height="15.0" fill="rgb(221,118,8)" rx="2" ry="2" />
<text  x="1099.38" y="143.5" ></text>
</g>
<g >
<title>do_page_fault (601 samples, 33.11%)</title><rect x="799.3" y="405" width="390.7" height="15.0" fill="rgb(208,155,0)" rx="2" ry="2" />
<text  x="802.27" y="415.5" >do_page_fault</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;TrieNode*&gt; &gt;::construct&lt;TrieNode*, TrieNode* const&amp;&gt; (111 samples, 6.12%)</title><rect x="517.8" y="357" width="72.1" height="15.0" fill="rgb(247,89,30)" rx="2" ry="2" />
<text  x="520.76" y="367.5" >std::all..</text>
</g>
<g >
<title>alloc_pages_vma (84 samples, 4.63%)</title><rect x="534.0" y="229" width="54.6" height="15.0" fill="rgb(253,60,32)" rx="2" ry="2" />
<text  x="537.01" y="239.5" >alloc..</text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.06%)</title><rect x="1096.4" y="245" width="0.6" height="15.0" fill="rgb(210,41,52)" rx="2" ry="2" />
<text  x="1099.38" y="255.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (1 samples, 0.06%)</title><rect x="792.8" y="437" width="0.6" height="15.0" fill="rgb(236,99,9)" rx="2" ry="2" />
<text  x="795.77" y="447.5" ></text>
</g>
<g >
<title>perf_event_task_tick (1 samples, 0.06%)</title><rect x="1188.7" y="149" width="0.6" height="15.0" fill="rgb(253,15,29)" rx="2" ry="2" />
<text  x="1191.70" y="159.5" ></text>
</g>
<g >
<title>std::copy&lt;std::move_iterator&lt;TrieNode**&gt;, TrieNode**&gt; (22 samples, 1.21%)</title><rect x="712.1" y="293" width="14.4" height="15.0" fill="rgb(223,90,10)" rx="2" ry="2" />
<text  x="715.15" y="303.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;*, unsigned long&gt; (4 samples, 0.22%)</title><rect x="752.5" y="325" width="2.6" height="15.0" fill="rgb(232,13,25)" rx="2" ry="2" />
<text  x="755.46" y="335.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::_M_allocate (1 samples, 0.06%)</title><rect x="696.5" y="357" width="0.7" height="15.0" fill="rgb(247,56,34)" rx="2" ry="2" />
<text  x="699.55" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;*, std::vector&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;, std::allocator&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt; &gt; &gt; &gt;::base (3 samples, 0.17%)</title><rect x="459.2" y="389" width="2.0" height="15.0" fill="rgb(224,187,30)" rx="2" ry="2" />
<text  x="462.25" y="399.5" ></text>
</g>
<g >
<title>page_fault (53 samples, 2.92%)</title><rect x="758.3" y="421" width="34.5" height="15.0" fill="rgb(222,95,21)" rx="2" ry="2" />
<text  x="761.31" y="431.5" >pa..</text>
</g>
<g >
<title>clear_page_rep (140 samples, 7.71%)</title><rect x="1098.3" y="293" width="91.0" height="15.0" fill="rgb(240,125,18)" rx="2" ry="2" />
<text  x="1101.33" y="303.5" >clear_page..</text>
</g>
<g >
<title>__pagevec_lru_add_fn (1 samples, 0.06%)</title><rect x="791.5" y="277" width="0.6" height="15.0" fill="rgb(249,79,29)" rx="2" ry="2" />
<text  x="794.47" y="287.5" ></text>
</g>
<g >
<title>main (1,815 samples, 100.00%)</title><rect x="10.0" y="453" width="1180.0" height="15.0" fill="rgb(227,102,54)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >main</text>
</g>
<g >
<title>std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::emplace_back&lt;TrieNode*&gt; (1 samples, 0.06%)</title><rect x="738.8" y="373" width="0.7" height="15.0" fill="rgb(250,87,17)" rx="2" ry="2" />
<text  x="741.80" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;TrieNode**, std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt; &gt;::operator- (2 samples, 0.11%)</title><rect x="614.0" y="373" width="1.3" height="15.0" fill="rgb(249,146,41)" rx="2" ry="2" />
<text  x="616.98" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;char const, int&gt; &gt;::_M_ptr (3 samples, 0.17%)</title><rect x="610.7" y="341" width="2.0" height="15.0" fill="rgb(235,42,22)" rx="2" ry="2" />
<text  x="613.73" y="351.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;std::move_iterator&lt;TrieNode**&gt;, TrieNode**&gt; (30 samples, 1.65%)</title><rect x="706.9" y="325" width="19.6" height="15.0" fill="rgb(254,94,10)" rx="2" ry="2" />
<text  x="709.95" y="335.5" ></text>
</g>
<g >
<title>generic_smp_call_function_single_interrupt (4 samples, 0.22%)</title><rect x="787.6" y="245" width="2.6" height="15.0" fill="rgb(249,135,46)" rx="2" ry="2" />
<text  x="790.56" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;, std::allocator&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt; &gt; &gt;::operator[] (17 samples, 0.94%)</title><rect x="599.0" y="373" width="11.1" height="15.0" fill="rgb(229,173,52)" rx="2" ry="2" />
<text  x="602.02" y="383.5" ></text>
</g>
<g >
<title>clear_page_rep (2 samples, 0.11%)</title><rect x="799.3" y="293" width="1.3" height="15.0" fill="rgb(231,142,34)" rx="2" ry="2" />
<text  x="802.27" y="303.5" ></text>
</g>
<g >
<title>handle_mm_fault (53 samples, 2.92%)</title><rect x="758.3" y="373" width="34.5" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="761.31" y="383.5" >ha..</text>
</g>
<g >
<title>std::__niter_base&lt;TrieNode**&gt; (5 samples, 0.28%)</title><rect x="721.3" y="261" width="3.2" height="15.0" fill="rgb(243,110,9)" rx="2" ry="2" />
<text  x="724.25" y="271.5" ></text>
</g>
<g >
<title>alloc_pages_vma (51 samples, 2.81%)</title><rect x="758.3" y="325" width="33.2" height="15.0" fill="rgb(220,126,9)" rx="2" ry="2" />
<text  x="761.31" y="335.5" >al..</text>
</g>
<g >
<title>__alloc_pages_nodemask (457 samples, 25.18%)</title><rect x="801.2" y="277" width="297.1" height="15.0" fill="rgb(227,162,23)" rx="2" ry="2" />
<text  x="804.22" y="287.5" >__alloc_pages_nodemask</text>
</g>
<g >
<title>x2apic_send_IPI (7 samples, 0.39%)</title><rect x="794.7" y="133" width="4.6" height="15.0" fill="rgb(245,204,40)" rx="2" ry="2" />
<text  x="797.72" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::max_size (1 samples, 0.06%)</title><rect x="515.2" y="373" width="0.6" height="15.0" fill="rgb(234,81,29)" rx="2" ry="2" />
<text  x="518.16" y="383.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;*, unsigned long&gt; (4 samples, 0.22%)</title><rect x="752.5" y="341" width="2.6" height="15.0" fill="rgb(213,223,44)" rx="2" ry="2" />
<text  x="755.46" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::begin (1 samples, 0.06%)</title><rect x="662.7" y="373" width="0.7" height="15.0" fill="rgb(239,220,15)" rx="2" ry="2" />
<text  x="665.74" y="383.5" ></text>
</g>
<g >
<title>handle_mm_fault (601 samples, 33.11%)</title><rect x="799.3" y="373" width="390.7" height="15.0" fill="rgb(240,123,45)" rx="2" ry="2" />
<text  x="802.27" y="383.5" >handle_mm_fault</text>
</g>
<g >
<title>malloc (1 samples, 0.06%)</title><rect x="696.5" y="325" width="0.7" height="15.0" fill="rgb(230,71,28)" rx="2" ry="2" />
<text  x="699.55" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::vector (4 samples, 0.22%)</title><rect x="752.5" y="293" width="2.6" height="15.0" fill="rgb(240,70,40)" rx="2" ry="2" />
<text  x="755.46" y="303.5" ></text>
</g>
<g >
<title>__libc_start_main (1,147 samples, 63.20%)</title><rect x="10.0" y="421" width="745.7" height="15.0" fill="rgb(238,225,20)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >__libc_start_main</text>
</g>
<g >
<title>std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::_M_check_len (12 samples, 0.66%)</title><rect x="727.8" y="357" width="7.8" height="15.0" fill="rgb(232,77,47)" rx="2" ry="2" />
<text  x="730.75" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;, std::allocator&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt; &gt; &gt;::vector (4 samples, 0.22%)</title><rect x="752.5" y="389" width="2.6" height="15.0" fill="rgb(218,192,6)" rx="2" ry="2" />
<text  x="755.46" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::push_back (115 samples, 6.34%)</title><rect x="515.8" y="373" width="74.8" height="15.0" fill="rgb(243,23,51)" rx="2" ry="2" />
<text  x="518.81" y="383.5" >std::vec..</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;TrieNode**, std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt; &gt;::operator++ (1 samples, 0.06%)</title><rect x="10.0" y="405" width="0.7" height="15.0" fill="rgb(215,113,15)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;TrieNode**, TrieNode*&gt; (18 samples, 0.99%)</title><rect x="645.2" y="357" width="11.7" height="15.0" fill="rgb(223,193,25)" rx="2" ry="2" />
<text  x="648.18" y="367.5" ></text>
</g>
<g >
<title>clear_page_rep (3 samples, 0.17%)</title><rect x="685.5" y="213" width="1.9" height="15.0" fill="rgb(246,123,34)" rx="2" ry="2" />
<text  x="688.49" y="223.5" ></text>
</g>
<g >
<title>std::__make_move_if_noexcept_iterator&lt;TrieNode*, std::move_iterator&lt;TrieNode**&gt; &gt; (6 samples, 0.33%)</title><rect x="701.7" y="341" width="3.9" height="15.0" fill="rgb(250,54,15)" rx="2" ry="2" />
<text  x="704.75" y="351.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;TrieNode**&gt;::move_iterator (1 samples, 0.06%)</title><rect x="705.0" y="325" width="0.6" height="15.0" fill="rgb(229,115,41)" rx="2" ry="2" />
<text  x="708.00" y="335.5" ></text>
</g>
<g >
<title>handle_mm_fault (3 samples, 0.17%)</title><rect x="685.5" y="293" width="1.9" height="15.0" fill="rgb(211,83,14)" rx="2" ry="2" />
<text  x="688.49" y="303.5" ></text>
</g>
<g >
<title>ttwu_do_wakeup (7 samples, 0.39%)</title><rect x="794.7" y="197" width="4.6" height="15.0" fill="rgb(210,146,53)" rx="2" ry="2" />
<text  x="797.72" y="207.5" ></text>
</g>
<g >
<title>read (7 samples, 0.39%)</title><rect x="794.7" y="437" width="4.6" height="15.0" fill="rgb(208,173,18)" rx="2" ry="2" />
<text  x="797.72" y="447.5" ></text>
</g>
<g >
<title>x86_pmu_disable (1 samples, 0.06%)</title><rect x="1188.7" y="133" width="0.6" height="15.0" fill="rgb(246,167,27)" rx="2" ry="2" />
<text  x="1191.70" y="143.5" ></text>
</g>
<g >
<title>ttwu_do_activate (7 samples, 0.39%)</title><rect x="794.7" y="213" width="4.6" height="15.0" fill="rgb(226,198,53)" rx="2" ry="2" />
<text  x="797.72" y="223.5" ></text>
</g>
<g >
<title>std::__miter_base&lt;TrieNode**&gt; (2 samples, 0.11%)</title><rect x="724.5" y="261" width="1.3" height="15.0" fill="rgb(227,128,49)" rx="2" ry="2" />
<text  x="727.50" y="271.5" ></text>
</g>
<g >
<title>remote_function (4 samples, 0.22%)</title><rect x="787.6" y="213" width="2.6" height="15.0" fill="rgb(233,0,9)" rx="2" ry="2" />
<text  x="790.56" y="223.5" ></text>
</g>
<g >
<title>update_process_times (1 samples, 0.06%)</title><rect x="1188.7" y="181" width="0.6" height="15.0" fill="rgb(240,181,4)" rx="2" ry="2" />
<text  x="1191.70" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;*, std::vector&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;, std::allocator&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt; &gt; &gt; &gt;::base (16 samples, 0.88%)</title><rect x="498.9" y="373" width="10.4" height="15.0" fill="rgb(229,85,41)" rx="2" ry="2" />
<text  x="501.90" y="383.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (51 samples, 2.81%)</title><rect x="758.3" y="309" width="33.2" height="15.0" fill="rgb(209,117,34)" rx="2" ry="2" />
<text  x="761.31" y="319.5" >__..</text>
</g>
<g >
<title>__alloc_pages_nodemask (2 samples, 0.11%)</title><rect x="799.3" y="309" width="1.3" height="15.0" fill="rgb(215,180,2)" rx="2" ry="2" />
<text  x="802.27" y="319.5" ></text>
</g>
<g >
<title>__handle_mm_fault (601 samples, 33.11%)</title><rect x="799.3" y="357" width="390.7" height="15.0" fill="rgb(226,12,27)" rx="2" ry="2" />
<text  x="802.27" y="367.5" >__handle_mm_fault</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;TrieNode**, std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt; &gt;::operator++ (2 samples, 0.11%)</title><rect x="457.9" y="389" width="1.3" height="15.0" fill="rgb(211,65,12)" rx="2" ry="2" />
<text  x="460.94" y="399.5" ></text>
</g>
<g >
<title>__handle_mm_fault (84 samples, 4.63%)</title><rect x="534.0" y="261" width="54.6" height="15.0" fill="rgb(231,120,6)" rx="2" ry="2" />
<text  x="537.01" y="271.5" >__han..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;TrieNode*&gt; &gt;::construct&lt;TrieNode*, TrieNode* const&amp;&gt; (1 samples, 0.06%)</title><rect x="610.1" y="389" width="0.6" height="15.0" fill="rgb(219,100,52)" rx="2" ry="2" />
<text  x="613.08" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;TrieNode*&gt; &gt;::allocate (1 samples, 0.06%)</title><rect x="696.5" y="341" width="0.7" height="15.0" fill="rgb(236,42,22)" rx="2" ry="2" />
<text  x="699.55" y="351.5" ></text>
</g>
<g >
<title>std::__miter_base&lt;TrieNode**&gt; (3 samples, 0.17%)</title><rect x="724.5" y="277" width="2.0" height="15.0" fill="rgb(241,165,34)" rx="2" ry="2" />
<text  x="727.50" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::back (2 samples, 0.11%)</title><rect x="614.0" y="389" width="1.3" height="15.0" fill="rgb(226,8,3)" rx="2" ry="2" />
<text  x="616.98" y="399.5" ></text>
</g>
<g >
<title>tick_sched_timer (1 samples, 0.06%)</title><rect x="1096.4" y="181" width="0.6" height="15.0" fill="rgb(219,3,17)" rx="2" ry="2" />
<text  x="1099.38" y="191.5" ></text>
</g>
<g >
<title>std::forward&lt;TrieNode* const&amp;&gt; (3 samples, 0.17%)</title><rect x="687.4" y="341" width="2.0" height="15.0" fill="rgb(234,26,34)" rx="2" ry="2" />
<text  x="690.44" y="351.5" ></text>
</g>
<g >
<title>x86_pmu_enable_all (4 samples, 0.22%)</title><rect x="787.6" y="133" width="2.6" height="15.0" fill="rgb(206,58,29)" rx="2" ry="2" />
<text  x="790.56" y="143.5" ></text>
</g>
<g >
<title>autoremove_wake_function (7 samples, 0.39%)</title><rect x="794.7" y="261" width="4.6" height="15.0" fill="rgb(221,97,23)" rx="2" ry="2" />
<text  x="797.72" y="271.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;true, TrieNode**, TrieNode**&gt; (19 samples, 1.05%)</title><rect x="712.1" y="277" width="12.4" height="15.0" fill="rgb(241,205,26)" rx="2" ry="2" />
<text  x="715.15" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;TrieNode*&gt;::construct&lt;TrieNode*, TrieNode*&gt; (1 samples, 0.06%)</title><rect x="738.8" y="341" width="0.7" height="15.0" fill="rgb(215,180,21)" rx="2" ry="2" />
<text  x="741.80" y="351.5" ></text>
</g>
<g >
<title>__pte_alloc (457 samples, 25.18%)</title><rect x="801.2" y="325" width="297.1" height="15.0" fill="rgb(231,144,38)" rx="2" ry="2" />
<text  x="804.22" y="335.5" >__pte_alloc</text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;char const, int&gt; &gt;::operator* (3 samples, 0.17%)</title><rect x="610.7" y="373" width="2.0" height="15.0" fill="rgb(234,64,46)" rx="2" ry="2" />
<text  x="613.73" y="383.5" ></text>
</g>
<g >
<title>std::max&lt;unsigned long&gt; (1 samples, 0.06%)</title><rect x="729.1" y="341" width="0.6" height="15.0" fill="rgb(218,199,33)" rx="2" ry="2" />
<text  x="732.05" y="351.5" ></text>
</g>
<g >
<title>std::forward&lt;TrieNode* const&amp;&gt; (1 samples, 0.06%)</title><rect x="589.9" y="357" width="0.7" height="15.0" fill="rgb(254,59,5)" rx="2" ry="2" />
<text  x="592.92" y="367.5" ></text>
</g>
<g >
<title>clear_page_rep (49 samples, 2.70%)</title><rect x="758.3" y="293" width="31.9" height="15.0" fill="rgb(246,182,5)" rx="2" ry="2" />
<text  x="761.31" y="303.5" >cl..</text>
</g>
<g >
<title>delay_tsc (1 samples, 0.06%)</title><rect x="1188.7" y="69" width="0.6" height="15.0" fill="rgb(232,111,31)" rx="2" ry="2" />
<text  x="1191.70" y="79.5" ></text>
</g>
<g >
<title>main::{lambda (155 samples, 8.54%)</title><rect x="509.3" y="389" width="100.8" height="15.0" fill="rgb(222,6,1)" rx="2" ry="2" />
<text  x="512.31" y="399.5" >main::{lambda</text>
</g>
<g >
<title>[unknown] (1 samples, 0.06%)</title><rect x="755.7" y="405" width="0.7" height="15.0" fill="rgb(223,227,39)" rx="2" ry="2" />
<text  x="758.71" y="415.5" ></text>
</g>
<g >
<title>resched_curr (7 samples, 0.39%)</title><rect x="794.7" y="165" width="4.6" height="15.0" fill="rgb(217,214,31)" rx="2" ry="2" />
<text  x="797.72" y="175.5" ></text>
</g>
<g >
<title>check_preempt_curr (7 samples, 0.39%)</title><rect x="794.7" y="181" width="4.6" height="15.0" fill="rgb(217,189,12)" rx="2" ry="2" />
<text  x="797.72" y="191.5" ></text>
</g>
<g >
<title>smp_call_function_single_interrupt (4 samples, 0.22%)</title><rect x="787.6" y="261" width="2.6" height="15.0" fill="rgb(225,94,0)" rx="2" ry="2" />
<text  x="790.56" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::_M_realloc_insert&lt;TrieNode* const&amp;&gt; (74 samples, 4.08%)</title><rect x="690.7" y="373" width="48.1" height="15.0" fill="rgb(219,174,22)" rx="2" ry="2" />
<text  x="693.69" y="383.5" >std:..</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;*, std::vector&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;, std::allocator&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt; &gt; &gt; &gt;::operator* (3 samples, 0.17%)</title><rect x="461.2" y="389" width="1.9" height="15.0" fill="rgb(240,121,54)" rx="2" ry="2" />
<text  x="464.20" y="399.5" ></text>
</g>
<g >
<title>__handle_mm_fault (53 samples, 2.92%)</title><rect x="758.3" y="357" width="34.5" height="15.0" fill="rgb(252,72,23)" rx="2" ry="2" />
<text  x="761.31" y="367.5" >__..</text>
</g>
<g >
<title>std::__numpunct_cache&lt;char&gt;::~__numpunct_cache (1 samples, 0.06%)</title><rect x="755.7" y="421" width="0.7" height="15.0" fill="rgb(228,204,13)" rx="2" ry="2" />
<text  x="758.71" y="431.5" ></text>
</g>
<g >
<title>do_anonymous_page (53 samples, 2.92%)</title><rect x="758.3" y="341" width="34.5" height="15.0" fill="rgb(208,19,54)" rx="2" ry="2" />
<text  x="761.31" y="351.5" >do..</text>
</g>
<g >
<title>default_wake_function (7 samples, 0.39%)</title><rect x="794.7" y="245" width="4.6" height="15.0" fill="rgb(234,121,46)" rx="2" ry="2" />
<text  x="797.72" y="255.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1 samples, 0.06%)</title><rect x="1096.4" y="197" width="0.6" height="15.0" fill="rgb(219,43,37)" rx="2" ry="2" />
<text  x="1099.38" y="207.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::_M_get_Tp_allocator (1 samples, 0.06%)</title><rect x="697.8" y="357" width="0.7" height="15.0" fill="rgb(253,96,8)" rx="2" ry="2" />
<text  x="700.85" y="367.5" ></text>
</g>
<g >
<title>flush_smp_call_function_queue (4 samples, 0.22%)</title><rect x="787.6" y="229" width="2.6" height="15.0" fill="rgb(207,1,38)" rx="2" ry="2" />
<text  x="790.56" y="239.5" ></text>
</g>
<g >
<title>_int_malloc (55 samples, 3.03%)</title><rect x="757.0" y="437" width="35.8" height="15.0" fill="rgb(240,184,1)" rx="2" ry="2" />
<text  x="760.01" y="447.5" >_in..</text>
</g>
<g >
<title>sys_brk (1 samples, 0.06%)</title><rect x="756.4" y="389" width="0.6" height="15.0" fill="rgb(214,8,52)" rx="2" ry="2" />
<text  x="759.36" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;*, std::vector&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;, std::allocator&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt; &gt; &gt; &gt; (1 samples, 0.06%)</title><rect x="12.0" y="405" width="0.6" height="15.0" fill="rgb(208,186,47)" rx="2" ry="2" />
<text  x="14.95" y="415.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.06%)</title><rect x="1188.7" y="261" width="0.6" height="15.0" fill="rgb(221,115,54)" rx="2" ry="2" />
<text  x="1191.70" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;TrieNode**, std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt; &gt;::base (2 samples, 0.11%)</title><rect x="456.6" y="389" width="1.3" height="15.0" fill="rgb(248,202,3)" rx="2" ry="2" />
<text  x="459.64" y="399.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::_M_get_Tp_allocator (1 samples, 0.06%)</title><rect x="731.7" y="325" width="0.6" height="15.0" fill="rgb(221,85,1)" rx="2" ry="2" />
<text  x="734.65" y="335.5" ></text>
</g>
<g >
<title>delay_tsc (1 samples, 0.06%)</title><rect x="1096.4" y="37" width="0.6" height="15.0" fill="rgb(238,141,34)" rx="2" ry="2" />
<text  x="1099.38" y="47.5" ></text>
</g>
<g >
<title>do_anonymous_page (4 samples, 0.22%)</title><rect x="752.5" y="165" width="2.6" height="15.0" fill="rgb(231,2,39)" rx="2" ry="2" />
<text  x="755.46" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;TrieNode**, std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt; &gt;::__normal_iterator (17 samples, 0.94%)</title><rect x="624.4" y="373" width="11.0" height="15.0" fill="rgb(229,223,42)" rx="2" ry="2" />
<text  x="627.38" y="383.5" ></text>
</g>
<g >
<title>handle_mm_fault (84 samples, 4.63%)</title><rect x="534.0" y="277" width="54.6" height="15.0" fill="rgb(247,16,43)" rx="2" ry="2" />
<text  x="537.01" y="287.5" >handl..</text>
</g>
<g >
<title>do_page_fault (84 samples, 4.63%)</title><rect x="534.0" y="309" width="54.6" height="15.0" fill="rgb(252,75,10)" rx="2" ry="2" />
<text  x="537.01" y="319.5" >do_pa..</text>
</g>
<g >
<title>std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::begin (31 samples, 1.71%)</title><rect x="615.3" y="389" width="20.1" height="15.0" fill="rgb(254,203,43)" rx="2" ry="2" />
<text  x="618.28" y="399.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.11%)</title><rect x="793.4" y="437" width="1.3" height="15.0" fill="rgb(233,38,2)" rx="2" ry="2" />
<text  x="796.42" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::size (3 samples, 0.17%)</title><rect x="733.6" y="341" width="2.0" height="15.0" fill="rgb(214,12,49)" rx="2" ry="2" />
<text  x="736.60" y="351.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.33%)</title><rect x="529.5" y="325" width="3.9" height="15.0" fill="rgb(211,86,43)" rx="2" ry="2" />
<text  x="532.46" y="335.5" ></text>
</g>
<g >
<title>std::map&lt;char, int, std::less&lt;char&gt;, std::allocator&lt;std::pair&lt;char const, int&gt; &gt; &gt;::operator[] (4 samples, 0.22%)</title><rect x="610.7" y="389" width="2.6" height="15.0" fill="rgb(243,204,54)" rx="2" ry="2" />
<text  x="613.73" y="399.5" ></text>
</g>
<g >
<title>alloc_pages_vma (141 samples, 7.77%)</title><rect x="1098.3" y="325" width="91.7" height="15.0" fill="rgb(254,22,17)" rx="2" ry="2" />
<text  x="1101.33" y="335.5" >alloc_page..</text>
</g>
<g >
<title>get_page_from_freelist (2 samples, 0.11%)</title><rect x="1097.0" y="261" width="1.3" height="15.0" fill="rgb(227,26,31)" rx="2" ry="2" />
<text  x="1100.03" y="271.5" ></text>
</g>
<g >
<title>alloc_pages_current (457 samples, 25.18%)</title><rect x="801.2" y="293" width="297.1" height="15.0" fill="rgb(240,13,10)" rx="2" ry="2" />
<text  x="804.22" y="303.5" >alloc_pages_current</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;TrieNode*&gt;::construct&lt;TrieNode*, TrieNode* const&amp;&gt; (107 samples, 5.90%)</title><rect x="520.4" y="341" width="69.5" height="15.0" fill="rgb(250,13,8)" rx="2" ry="2" />
<text  x="523.36" y="351.5" >__gnu_c..</text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;*, unsigned long, std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt; &gt; (4 samples, 0.22%)</title><rect x="752.5" y="357" width="2.6" height="15.0" fill="rgb(216,173,28)" rx="2" ry="2" />
<text  x="755.46" y="367.5" ></text>
</g>
<g >
<title>tick_sched_handle (1 samples, 0.06%)</title><rect x="1096.4" y="165" width="0.6" height="15.0" fill="rgb(225,204,43)" rx="2" ry="2" />
<text  x="1099.38" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;TrieNode, std::allocator&lt;TrieNode&gt; &gt;::operator[] (10 samples, 0.55%)</title><rect x="746.0" y="389" width="6.5" height="15.0" fill="rgb(205,174,26)" rx="2" ry="2" />
<text  x="748.96" y="399.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;true, true, std::random_access_iterator_tag&gt;::__copy_m&lt;TrieNode*&gt; (5 samples, 0.28%)</title><rect x="718.0" y="245" width="3.3" height="15.0" fill="rgb(233,131,43)" rx="2" ry="2" />
<text  x="721.00" y="255.5" ></text>
</g>
<g >
<title>native_smp_send_reschedule (7 samples, 0.39%)</title><rect x="794.7" y="149" width="4.6" height="15.0" fill="rgb(224,111,6)" rx="2" ry="2" />
<text  x="797.72" y="159.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1 samples, 0.06%)</title><rect x="1188.7" y="229" width="0.6" height="15.0" fill="rgb(208,127,12)" rx="2" ry="2" />
<text  x="1191.70" y="239.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (7 samples, 0.39%)</title><rect x="794.7" y="421" width="4.6" height="15.0" fill="rgb(226,33,39)" rx="2" ry="2" />
<text  x="797.72" y="431.5" ></text>
</g>
<g >
<title>__wake_up_common (7 samples, 0.39%)</title><rect x="794.7" y="277" width="4.6" height="15.0" fill="rgb(238,77,44)" rx="2" ry="2" />
<text  x="797.72" y="287.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (1 samples, 0.06%)</title><rect x="755.7" y="389" width="0.7" height="15.0" fill="rgb(236,12,17)" rx="2" ry="2" />
<text  x="758.71" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;TrieNode**, std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt; &gt;::__normal_iterator (3 samples, 0.17%)</title><rect x="668.6" y="373" width="1.9" height="15.0" fill="rgb(221,90,36)" rx="2" ry="2" />
<text  x="671.59" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;TrieNode**, std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt; &gt;::__normal_iterator (4 samples, 0.22%)</title><rect x="736.2" y="341" width="2.6" height="15.0" fill="rgb(215,150,37)" rx="2" ry="2" />
<text  x="739.20" y="351.5" ></text>
</g>
<g >
<title>all (1,815 samples, 100%)</title><rect x="10.0" y="469" width="1180.0" height="15.0" fill="rgb(233,82,34)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>call_function_single_interrupt (4 samples, 0.22%)</title><rect x="787.6" y="277" width="2.6" height="15.0" fill="rgb(239,105,6)" rx="2" ry="2" />
<text  x="790.56" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::size (7 samples, 0.39%)</title><rect x="741.4" y="389" width="4.6" height="15.0" fill="rgb(234,131,38)" rx="2" ry="2" />
<text  x="744.40" y="399.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.06%)</title><rect x="1096.4" y="229" width="0.6" height="15.0" fill="rgb(230,103,10)" rx="2" ry="2" />
<text  x="1099.38" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;*, std::vector&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;, std::allocator&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt; &gt; &gt; &gt; (37 samples, 2.04%)</title><rect x="485.3" y="389" width="24.0" height="15.0" fill="rgb(237,210,8)" rx="2" ry="2" />
<text  x="488.25" y="399.5" >_..</text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;, std::allocator&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt; &gt; &gt;::_M_default_initialize (4 samples, 0.22%)</title><rect x="752.5" y="373" width="2.6" height="15.0" fill="rgb(207,137,42)" rx="2" ry="2" />
<text  x="755.46" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;TrieNode*&gt;::construct&lt;TrieNode*, TrieNode* const&amp;&gt; (1 samples, 0.06%)</title><rect x="727.1" y="341" width="0.7" height="15.0" fill="rgb(225,184,42)" rx="2" ry="2" />
<text  x="730.10" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;*, std::vector&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;, std::allocator&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt; &gt; &gt; &gt;::operator* (2 samples, 0.11%)</title><rect x="10.7" y="405" width="1.3" height="15.0" fill="rgb(253,82,12)" rx="2" ry="2" />
<text  x="13.65" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;TrieNode**, std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt; &gt;::base (7 samples, 0.39%)</title><rect x="480.7" y="373" width="4.6" height="15.0" fill="rgb(210,201,39)" rx="2" ry="2" />
<text  x="483.70" y="383.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (84 samples, 4.63%)</title><rect x="534.0" y="213" width="54.6" height="15.0" fill="rgb(208,68,26)" rx="2" ry="2" />
<text  x="537.01" y="223.5" >__all..</text>
</g>
<g >
<title>tick_sched_timer (1 samples, 0.06%)</title><rect x="1188.7" y="213" width="0.6" height="15.0" fill="rgb(225,39,48)" rx="2" ry="2" />
<text  x="1191.70" y="223.5" ></text>
</g>
<g >
<title>__wake_up_sync_key (7 samples, 0.39%)</title><rect x="794.7" y="309" width="4.6" height="15.0" fill="rgb(208,61,54)" rx="2" ry="2" />
<text  x="797.72" y="319.5" ></text>
</g>
<g >
<title>std::map&lt;char, int, std::less&lt;char&gt;, std::allocator&lt;std::pair&lt;char const, int&gt; &gt; &gt;::lower_bound (1 samples, 0.06%)</title><rect x="612.7" y="373" width="0.6" height="15.0" fill="rgb(231,103,8)" rx="2" ry="2" />
<text  x="615.68" y="383.5" ></text>
</g>
<g >
<title>do_anonymous_page (3 samples, 0.17%)</title><rect x="685.5" y="261" width="1.9" height="15.0" fill="rgb(216,222,49)" rx="2" ry="2" />
<text  x="688.49" y="271.5" ></text>
</g>
<g >
<title>do_page_fault (4 samples, 0.22%)</title><rect x="752.5" y="229" width="2.6" height="15.0" fill="rgb(240,174,18)" rx="2" ry="2" />
<text  x="755.46" y="239.5" ></text>
</g>
<g >
<title>do_syscall_64 (7 samples, 0.39%)</title><rect x="794.7" y="405" width="4.6" height="15.0" fill="rgb(230,200,7)" rx="2" ry="2" />
<text  x="797.72" y="415.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;TrieNode**&gt; (12 samples, 0.66%)</title><rect x="649.1" y="341" width="7.8" height="15.0" fill="rgb(239,38,54)" rx="2" ry="2" />
<text  x="652.09" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::empty (1 samples, 0.06%)</title><rect x="662.7" y="389" width="0.7" height="15.0" fill="rgb(209,165,37)" rx="2" ry="2" />
<text  x="665.74" y="399.5" ></text>
</g>
<g >
<title>amd_pmu_disable_all (1 samples, 0.06%)</title><rect x="1096.4" y="85" width="0.6" height="15.0" fill="rgb(212,88,24)" rx="2" ry="2" />
<text  x="1099.38" y="95.5" ></text>
</g>
<g >
<title>std::forward&lt;TrieNode* const&amp;&gt; (2 samples, 0.11%)</title><rect x="588.6" y="325" width="1.3" height="15.0" fill="rgb(253,226,22)" rx="2" ry="2" />
<text  x="591.62" y="335.5" ></text>
</g>
<g >
<title>page_add_new_anon_rmap (1 samples, 0.06%)</title><rect x="792.1" y="325" width="0.7" height="15.0" fill="rgb(252,175,9)" rx="2" ry="2" />
<text  x="795.12" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::end (11 samples, 0.61%)</title><rect x="663.4" y="389" width="7.1" height="15.0" fill="rgb(251,46,36)" rx="2" ry="2" />
<text  x="666.39" y="399.5" ></text>
</g>
<g >
<title>__handle_mm_fault (4 samples, 0.22%)</title><rect x="752.5" y="181" width="2.6" height="15.0" fill="rgb(235,159,2)" rx="2" ry="2" />
<text  x="755.46" y="191.5" ></text>
</g>
<g >
<title>alloc_pages_vma (4 samples, 0.22%)</title><rect x="752.5" y="149" width="2.6" height="15.0" fill="rgb(242,136,49)" rx="2" ry="2" />
<text  x="755.46" y="159.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::_Vector_impl::_Vector_impl (4 samples, 0.22%)</title><rect x="752.5" y="261" width="2.6" height="15.0" fill="rgb(213,86,37)" rx="2" ry="2" />
<text  x="755.46" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;*, std::vector&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;, std::allocator&lt;std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt; &gt; &gt; &gt;::operator++ (11 samples, 0.61%)</title><rect x="463.1" y="389" width="7.2" height="15.0" fill="rgb(242,70,30)" rx="2" ry="2" />
<text  x="466.15" y="399.5" ></text>
</g>
<g >
<title>std::forward&lt;TrieNode* const&amp;&gt; (2 samples, 0.11%)</title><rect x="689.4" y="357" width="1.3" height="15.0" fill="rgb(230,64,43)" rx="2" ry="2" />
<text  x="692.39" y="367.5" ></text>
</g>
<g >
<title>update_process_times (1 samples, 0.06%)</title><rect x="1096.4" y="149" width="0.6" height="15.0" fill="rgb(205,109,21)" rx="2" ry="2" />
<text  x="1099.38" y="159.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;TrieNode*&gt; &gt;::max_size (2 samples, 0.11%)</title><rect x="732.3" y="325" width="1.3" height="15.0" fill="rgb(247,142,13)" rx="2" ry="2" />
<text  x="735.30" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::end (3 samples, 0.17%)</title><rect x="739.5" y="373" width="1.9" height="15.0" fill="rgb(234,190,31)" rx="2" ry="2" />
<text  x="742.45" y="383.5" ></text>
</g>
<g >
<title>sys_read (7 samples, 0.39%)</title><rect x="794.7" y="389" width="4.6" height="15.0" fill="rgb(220,71,54)" rx="2" ry="2" />
<text  x="797.72" y="399.5" ></text>
</g>
<g >
<title>__memmove_ssse3 (6 samples, 0.33%)</title><rect x="714.1" y="245" width="3.9" height="15.0" fill="rgb(244,223,8)" rx="2" ry="2" />
<text  x="717.10" y="255.5" ></text>
</g>
<g >
<title>clear_page_rep (455 samples, 25.07%)</title><rect x="801.2" y="261" width="295.8" height="15.0" fill="rgb(250,49,9)" rx="2" ry="2" />
<text  x="804.22" y="271.5" >clear_page_rep</text>
</g>
<g >
<title>amd_pmu_wait_on_overflow (1 samples, 0.06%)</title><rect x="1096.4" y="69" width="0.6" height="15.0" fill="rgb(247,4,10)" rx="2" ry="2" />
<text  x="1099.38" y="79.5" ></text>
</g>
<g >
<title>std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::size (13 samples, 0.72%)</title><rect x="590.6" y="373" width="8.4" height="15.0" fill="rgb(210,115,52)" rx="2" ry="2" />
<text  x="593.57" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;TrieNode*&gt; &gt;::construct&lt;TrieNode*, TrieNode* const&amp;&gt; (23 samples, 1.27%)</title><rect x="675.7" y="373" width="15.0" height="15.0" fill="rgb(228,152,0)" rx="2" ry="2" />
<text  x="678.74" y="383.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (3 samples, 0.17%)</title><rect x="685.5" y="229" width="1.9" height="15.0" fill="rgb(208,52,39)" rx="2" ry="2" />
<text  x="688.49" y="239.5" ></text>
</g>
<g >
<title>sysmalloc (601 samples, 33.11%)</title><rect x="799.3" y="437" width="390.7" height="15.0" fill="rgb(248,220,36)" rx="2" ry="2" />
<text  x="802.27" y="447.5" >sysmalloc</text>
</g>
<g >
<title>std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::push_back (106 samples, 5.84%)</title><rect x="672.5" y="389" width="68.9" height="15.0" fill="rgb(223,210,43)" rx="2" ry="2" />
<text  x="675.49" y="399.5" >std::ve..</text>
</g>
<g >
<title>x86_pmu_disable (1 samples, 0.06%)</title><rect x="1096.4" y="101" width="0.6" height="15.0" fill="rgb(247,10,15)" rx="2" ry="2" />
<text  x="1099.38" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;TrieNode**, std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt; &gt; (23 samples, 1.27%)</title><rect x="470.3" y="389" width="15.0" height="15.0" fill="rgb(213,194,18)" rx="2" ry="2" />
<text  x="473.30" y="399.5" ></text>
</g>
<g >
<title>__brk (1 samples, 0.06%)</title><rect x="756.4" y="437" width="0.6" height="15.0" fill="rgb(223,120,10)" rx="2" ry="2" />
<text  x="759.36" y="447.5" ></text>
</g>
<g >
<title>alloc_pages_vma (3 samples, 0.17%)</title><rect x="685.5" y="245" width="1.9" height="15.0" fill="rgb(211,135,9)" rx="2" ry="2" />
<text  x="688.49" y="255.5" ></text>
</g>
<g >
<title>clear_page_rep (4 samples, 0.22%)</title><rect x="752.5" y="117" width="2.6" height="15.0" fill="rgb(207,27,16)" rx="2" ry="2" />
<text  x="755.46" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::pop_back (3 samples, 0.17%)</title><rect x="670.5" y="389" width="2.0" height="15.0" fill="rgb(212,132,25)" rx="2" ry="2" />
<text  x="673.54" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;char, std::pair&lt;char const, int&gt;, std::_Select1st&lt;std::pair&lt;char const, int&gt; &gt;, std::less&lt;char&gt;, std::allocator&lt;std::pair&lt;char const, int&gt; &gt; &gt;::_S_value (1 samples, 0.06%)</title><rect x="612.7" y="309" width="0.6" height="15.0" fill="rgb(210,174,18)" rx="2" ry="2" />
<text  x="615.68" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;char, std::pair&lt;char const, int&gt;, std::_Select1st&lt;std::pair&lt;char const, int&gt; &gt;, std::less&lt;char&gt;, std::allocator&lt;std::pair&lt;char const, int&gt; &gt; &gt;::lower_bound (1 samples, 0.06%)</title><rect x="612.7" y="357" width="0.6" height="15.0" fill="rgb(236,4,1)" rx="2" ry="2" />
<text  x="615.68" y="367.5" ></text>
</g>
<g >
<title>page_fault (3 samples, 0.17%)</title><rect x="685.5" y="341" width="1.9" height="15.0" fill="rgb(246,145,9)" rx="2" ry="2" />
<text  x="688.49" y="351.5" ></text>
</g>
<g >
<title>__perf_event_enable (4 samples, 0.22%)</title><rect x="787.6" y="181" width="2.6" height="15.0" fill="rgb(216,56,53)" rx="2" ry="2" />
<text  x="790.56" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::push_back (1 samples, 0.06%)</title><rect x="755.1" y="405" width="0.6" height="15.0" fill="rgb(240,62,9)" rx="2" ry="2" />
<text  x="758.06" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;char, std::pair&lt;char const, int&gt;, std::_Select1st&lt;std::pair&lt;char const, int&gt; &gt;, std::less&lt;char&gt;, std::allocator&lt;std::pair&lt;char const, int&gt; &gt; &gt;::_S_key (1 samples, 0.06%)</title><rect x="612.7" y="325" width="0.6" height="15.0" fill="rgb(247,159,32)" rx="2" ry="2" />
<text  x="615.68" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;char, std::pair&lt;char const, int&gt;, std::_Select1st&lt;std::pair&lt;char const, int&gt; &gt;, std::less&lt;char&gt;, std::allocator&lt;std::pair&lt;char const, int&gt; &gt; &gt;::_M_lower_bound (1 samples, 0.06%)</title><rect x="612.7" y="341" width="0.6" height="15.0" fill="rgb(218,203,31)" rx="2" ry="2" />
<text  x="615.68" y="351.5" ></text>
</g>
<g >
<title>amd_pmu_wait_on_overflow (1 samples, 0.06%)</title><rect x="1188.7" y="101" width="0.6" height="15.0" fill="rgb(243,70,17)" rx="2" ry="2" />
<text  x="1191.70" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;TrieNode**, std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt; &gt; (2 samples, 0.11%)</title><rect x="694.6" y="357" width="1.3" height="15.0" fill="rgb(236,121,9)" rx="2" ry="2" />
<text  x="697.60" y="367.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;TrieNode**, TrieNode*&gt; (1 samples, 0.06%)</title><rect x="695.9" y="357" width="0.6" height="15.0" fill="rgb(218,38,27)" rx="2" ry="2" />
<text  x="698.90" y="367.5" ></text>
</g>
<g >
<title>__do_page_fault (4 samples, 0.22%)</title><rect x="752.5" y="213" width="2.6" height="15.0" fill="rgb(250,45,2)" rx="2" ry="2" />
<text  x="755.46" y="223.5" ></text>
</g>
<g >
<title>do_page_fault (3 samples, 0.17%)</title><rect x="685.5" y="325" width="1.9" height="15.0" fill="rgb(221,73,0)" rx="2" ry="2" />
<text  x="688.49" y="335.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;TrieNode*&gt; &gt;::construct&lt;TrieNode*, TrieNode*&gt; (1 samples, 0.06%)</title><rect x="738.8" y="357" width="0.7" height="15.0" fill="rgb(212,26,18)" rx="2" ry="2" />
<text  x="741.80" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;TrieNode**, std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt; &gt;::__normal_iterator (3 samples, 0.17%)</title><rect x="739.5" y="357" width="1.9" height="15.0" fill="rgb(210,6,22)" rx="2" ry="2" />
<text  x="742.45" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;TrieNode*&gt;::construct&lt;TrieNode*, TrieNode* const&amp;&gt; (18 samples, 0.99%)</title><rect x="677.7" y="357" width="11.7" height="15.0" fill="rgb(227,73,48)" rx="2" ry="2" />
<text  x="680.69" y="367.5" ></text>
</g>
<g >
<title>page_fault (601 samples, 33.11%)</title><rect x="799.3" y="421" width="390.7" height="15.0" fill="rgb(217,197,6)" rx="2" ry="2" />
<text  x="802.27" y="431.5" >page_fault</text>
</g>
<g >
<title>page_fault (85 samples, 4.68%)</title><rect x="533.4" y="325" width="55.2" height="15.0" fill="rgb(207,182,43)" rx="2" ry="2" />
<text  x="536.36" y="335.5" >page_..</text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.06%)</title><rect x="1189.3" y="293" width="0.7" height="15.0" fill="rgb(245,186,54)" rx="2" ry="2" />
<text  x="1192.35" y="303.5" ></text>
</g>
<g >
<title>__pmd_alloc (2 samples, 0.11%)</title><rect x="799.3" y="341" width="1.3" height="15.0" fill="rgb(239,61,12)" rx="2" ry="2" />
<text  x="802.27" y="351.5" ></text>
</g>
<g >
<title>ctx_resched (4 samples, 0.22%)</title><rect x="787.6" y="165" width="2.6" height="15.0" fill="rgb(234,220,22)" rx="2" ry="2" />
<text  x="790.56" y="175.5" ></text>
</g>
<g >
<title>pte_alloc_one (457 samples, 25.18%)</title><rect x="801.2" y="309" width="297.1" height="15.0" fill="rgb(223,15,49)" rx="2" ry="2" />
<text  x="804.22" y="319.5" >pte_alloc_one</text>
</g>
<g >
<title>main (1,142 samples, 62.92%)</title><rect x="12.6" y="405" width="742.5" height="15.0" fill="rgb(251,193,28)" rx="2" ry="2" />
<text  x="15.60" y="415.5" >main</text>
</g>
<g >
<title>std::_Vector_base&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::_M_get_Tp_allocator (9 samples, 0.50%)</title><rect x="656.9" y="357" width="5.8" height="15.0" fill="rgb(230,211,30)" rx="2" ry="2" />
<text  x="659.89" y="367.5" ></text>
</g>
<g >
<title>try_to_wake_up (7 samples, 0.39%)</title><rect x="794.7" y="229" width="4.6" height="15.0" fill="rgb(231,220,9)" rx="2" ry="2" />
<text  x="797.72" y="239.5" ></text>
</g>
<g >
<title>do_anonymous_page (84 samples, 4.63%)</title><rect x="534.0" y="245" width="54.6" height="15.0" fill="rgb(242,56,26)" rx="2" ry="2" />
<text  x="537.01" y="255.5" >do_an..</text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;std::move_iterator&lt;TrieNode**&gt;, TrieNode**, TrieNode*&gt; (32 samples, 1.76%)</title><rect x="705.6" y="341" width="20.9" height="15.0" fill="rgb(222,162,13)" rx="2" ry="2" />
<text  x="708.65" y="351.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.06%)</title><rect x="588.0" y="197" width="0.6" height="15.0" fill="rgb(244,72,32)" rx="2" ry="2" />
<text  x="590.97" y="207.5" ></text>
</g>
<g >
<title>handle_mm_fault (4 samples, 0.22%)</title><rect x="752.5" y="197" width="2.6" height="15.0" fill="rgb(248,86,2)" rx="2" ry="2" />
<text  x="755.46" y="207.5" ></text>
</g>
<g >
<title>native_write_msr (4 samples, 0.22%)</title><rect x="787.6" y="117" width="2.6" height="15.0" fill="rgb(208,4,25)" rx="2" ry="2" />
<text  x="790.56" y="127.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (1 samples, 0.06%)</title><rect x="791.5" y="325" width="0.6" height="15.0" fill="rgb(224,163,14)" rx="2" ry="2" />
<text  x="794.47" y="335.5" ></text>
</g>
<g >
<title>perf_event_task_tick (1 samples, 0.06%)</title><rect x="1096.4" y="117" width="0.6" height="15.0" fill="rgb(236,133,47)" rx="2" ry="2" />
<text  x="1099.38" y="127.5" ></text>
</g>
<g >
<title>new_sync_read (7 samples, 0.39%)</title><rect x="794.7" y="341" width="4.6" height="15.0" fill="rgb(236,35,15)" rx="2" ry="2" />
<text  x="797.72" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::clear (42 samples, 2.31%)</title><rect x="635.4" y="389" width="27.3" height="15.0" fill="rgb(226,206,24)" rx="2" ry="2" />
<text  x="638.43" y="399.5" >s..</text>
</g>
<g >
<title>__do_page_fault (3 samples, 0.17%)</title><rect x="685.5" y="309" width="1.9" height="15.0" fill="rgb(234,119,33)" rx="2" ry="2" />
<text  x="688.49" y="319.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;TrieNode**, TrieNode**, std::allocator&lt;TrieNode*&gt; &gt; (43 samples, 2.37%)</title><rect x="698.5" y="357" width="28.0" height="15.0" fill="rgb(214,227,48)" rx="2" ry="2" />
<text  x="701.50" y="367.5" >s..</text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;char const, int&gt; &gt;::_M_addr (1 samples, 0.06%)</title><rect x="612.0" y="325" width="0.7" height="15.0" fill="rgb(215,107,32)" rx="2" ry="2" />
<text  x="615.03" y="335.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.06%)</title><rect x="1188.7" y="245" width="0.6" height="15.0" fill="rgb(236,114,21)" rx="2" ry="2" />
<text  x="1191.70" y="255.5" ></text>
</g>
<g >
<title>__lru_cache_add (1 samples, 0.06%)</title><rect x="791.5" y="309" width="0.6" height="15.0" fill="rgb(214,129,47)" rx="2" ry="2" />
<text  x="794.47" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;TrieNode*, std::allocator&lt;TrieNode*&gt; &gt;::begin (5 samples, 0.28%)</title><rect x="735.6" y="357" width="3.2" height="15.0" fill="rgb(218,219,53)" rx="2" ry="2" />
<text  x="738.55" y="367.5" ></text>
</g>
<g >
<title>tick_sched_handle (1 samples, 0.06%)</title><rect x="1188.7" y="197" width="0.6" height="15.0" fill="rgb(239,68,4)" rx="2" ry="2" />
<text  x="1191.70" y="207.5" ></text>
</g>
<g >
<title>scheduler_tick (1 samples, 0.06%)</title><rect x="1188.7" y="165" width="0.6" height="15.0" fill="rgb(207,170,15)" rx="2" ry="2" />
<text  x="1191.70" y="175.5" ></text>
</g>
</g>
</svg>
